# =================================================================
# DAAV Backend API - Environment Variables Configuration
# =================================================================
# Copy this file to .env and modify values according to your needs
# cp .env.example .env

# =================================================================
# APPLICATION CONFIGURATION
# =================================================================
# Application name
APP_NAME=DAAV Backend API

# Application version
APP_VERSION=1.0.0

# Environment (development/production/test)
ENVIRONMENT=development

# Debug mode (true/false)
DEBUG=true

# =================================================================
# SERVER CONFIGURATION
# =================================================================
# Listen address
HOST=0.0.0.0

# Listen port
PORT=8000

# =================================================================
# MONGODB CONFIGURATION
# =================================================================
# MongoDB connection URL (local development - no authentication)
MONGODB_URL=mongodb://localhost:27017

# MongoDB connection URL (production with authentication)
# MONGODB_URL=mongodb://username:password@host:port/database?authSource=admin

# MongoDB Atlas connection URL (cloud)
# MONGODB_URL=mongodb+srv://username:password@cluster.mongodb.net/database?retryWrites=true&w=majority

# Database name
DATABASE_NAME=daav_datasets

# NOTE: When using Docker Compose, these values are overridden by
# the environment variables defined in docker-compose.yml

# =================================================================
# CORS CONFIGURATION
# =================================================================
# Allowed origins (comma-separated)
CORS_ORIGINS=http://localhost:8080,http://localhost:4200,http://localhost:8100,http://daav.ptx.profenpoche.com,https://daav.ptx.profenpoche.com

# =================================================================
# SECURITY & AUTHENTICATION
# =================================================================
# JWT Secret Key (REQUIRED for authentication)
# Generate a secure key with: python -c "import secrets; print(secrets.token_urlsafe(32))"
# MUST be at least 32 characters long
JWT_SECRET_KEY=change-this-to-a-strong-random-secret-key-min-32-characters-REQUIRED

# JWT Configuration
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=60
JWT_REFRESH_TOKEN_EXPIRE_DAYS=90

# Security middleware settings
SECURITY_ENABLED=true
SECURITY_RATE_LIMIT=100
SECURITY_TIME_WINDOW=60

# Authentication & Authorization
# If true: Anyone can register new users (public registration)
# If false: Only admins can create users (recommended for production)
ALLOW_PUBLIC_REGISTRATION=false

# =================================================================
# EMAIL CONFIGURATION (SMTP)
# =================================================================
# SMTP server settings for sending emails (password reset, notifications)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-password-here
SMTP_FROM_EMAIL=your-email@gmail.com
SMTP_FROM_NAME=DAAV Application
SMTP_USE_TLS=true

# Password Reset Configuration
PASSWORD_RESET_TOKEN_EXPIRE_HOURS=1
FRONTEND_URL=http://localhost:4200

# NOTE: For Gmail, you need to create an App Password:
# 1. Go to Google Account settings
# 2. Security → 2-Step Verification (enable it)
# 3. App Passwords → Generate new password
# 4. Use the generated password as SMTP_PASSWORD

# =================================================================
# FILE UPLOADS
# =================================================================
# Upload directory (relative to app/ or absolute path)
UPLOAD_DIR=uploads
# Allowed directory who bypass security checks
#DIRECTORY_WHITE_LIST=/opt/uploads,/opt/static

# Maximum file size (supports suffixes: KB, MB, GB or raw bytes)
MAX_FILE_SIZE=100MB

# =================================================================
# ROUTE ACCESS CONTROL
# =================================================================
# Domain whitelist - Domains that can access routes without authentication
# Comma-separated list of domains (e.g., example.com,api.example.com)
# If a request comes from a whitelisted domain, it bypasses authentication
# Note: API keys for Bearer tokens and custom headers are passed as function parameters
DOMAIN_WHITELIST=

# =================================================================
# LOGGING CONFIGURATION
# =================================================================
# Log level (DEBUG/INFO/WARNING/ERROR/CRITICAL)
LOG_LEVEL=INFO

# Log file
LOG_FILE=/app/logs/app.log

# Log file maximum size
LOG_MAX_SIZE=10MB

# Log backup count
LOG_BACKUP_COUNT=5

# =================================================================
# SECURITY LOGGING CONFIGURATION
# =================================================================
# Security log file (relative to /logs or absolute path)
SECURITY_LOG_FILE=security.log
# Security log level (DEBUG/INFO/WARNING/ERROR/CRITICAL)
SECURITY_LOG_LEVEL=INFO
# Security log file maximum size
SECURITY_LOG_MAX_SIZE=10MB
# Security log backup count
SECURITY_LOG_BACKUP_COUNT=5

# =================================================================
# SECURITY NOTES
# =================================================================
# IMPORTANT:
# - NEVER commit the .env file to your Git repository
# - Use secure values in production
# - Change all default secret keys
# - Restrict CORS origins in production
# - Use HTTPS in production
# 
# DEFAULT ADMIN ACCOUNT (created automatically if no users exist):
# - Username: admin
# - Password: Admin123!
# - CHANGE THIS PASSWORD IMMEDIATELY AFTER FIRST LOGIN!
# 
# USER REGISTRATION:
# - Set ALLOW_PUBLIC_REGISTRATION=true to allow anyone to register
# - Set ALLOW_PUBLIC_REGISTRATION=false (recommended) to restrict user creation to admins only
# - Even with public registration, only admins can create admin users